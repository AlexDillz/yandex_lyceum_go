Типы в Go также поддерживают преобразование типов или кастинг (casting). Он полезен для того, 
чтобы выполнить операцию над переменной определённого типа, 
которая этим типом не поддерживается. Например, мы можем привести переменную типа float64 к типу int:

var a float64 = 3.14
var b int = int(a)


var a int = 3
var b float64 = 3.14

a = int(b) // неявное преобразование типа

Иногда лучше использовать явное преобразование типов — например, 
когда нужно привести переменную к типу, который реализует нужный интерфейс. Для этого используется конструкция <тип>(переменная):

var i interface{} = "hello"

s := i.(string) // type assertion (декларация типа)

fmt.Println(s)

В этом примере мы объявляем переменную i типа interface{}, которая может содержать значения любого типа. 
Затем мы приводим переменную i к типу string с помощью конструкции i.(string). 
Идёт проверка того, что в интерфейсе находится значения типа string, и если это так, в переменную s кладётся строка. 
Если за интерфейсом лежит другой тип, включится паника, т. е. runtime error (так делать можно, если вы на 100% уверены в том, что это обосновано).
Чтобы паники не было, используют такой синтаксис: s,ok := i.(string). 
При успешном приведении в ok придёт true, а в s — строка; при неуспешном — в ok придёт false, а в s — пустая строка.